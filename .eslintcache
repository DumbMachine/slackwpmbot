[{"/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/index.js":"1","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/App.js":"2","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/requests.js":"3","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Timer.js":"4","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Input.js":"5","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Stats.js":"6","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Chart.js":"7"},{"size":262,"mtime":1610561151093,"results":"8","hashOfConfig":"9"},{"size":2292,"mtime":1610561151093,"results":"10","hashOfConfig":"9"},{"size":929,"mtime":1610561151093,"results":"11","hashOfConfig":"9"},{"size":564,"mtime":1610561151093,"results":"12","hashOfConfig":"9"},{"size":4420,"mtime":1610561151093,"results":"13","hashOfConfig":"9"},{"size":679,"mtime":1610561151093,"results":"14","hashOfConfig":"9"},{"size":1940,"mtime":1610561151093,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"16dxdyc",{"filePath":"19","messages":"20","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"18"},"/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/index.js",[],["36","37"],"/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/App.js",["38","39","40","41","42","43"],"import React, { useEffect, useState } from \"react\";\nimport { Navbar, NavItem, NavLink, NavbarBrand, Nav } from \"reactstrap\";\nimport Input from \"./components/Input\";\nimport Timer from \"./components/Timer\";\nimport Stats from \"./components/Stats\";\nimport Chart from \"./components/Chart\";\nimport { postData } from \"./requests\";\nfunction App() {\n  const TIME = 1;\n  const [dataPosted, setDataPosted] = useState({});\n  const [time, setTime] = useState(TIME);\n  const [startTimer, setStartTimer] = useState(false);\n  const [stats, setStats] = useState([]);\n  const [modalIsOpen, modalToggle] = useState(false);\n  const [data, setData] = useState([]);\n  const startCountdown = async (startTime) => {\n    for (let i = startTime; i >= 0; i--) {\n      await new Promise((r) => setTimeout(r, 1000));\n      setTime(i);\n    }\n    setStartTimer(false);\n  };\n\n  useEffect(() => {\n    if (time === 0) {\n      //display modal with stats when time runs out\n      modalToggle(true);\n\n      //on closing it, reset time\n      setTime(TIME);\n    }\n  }, [time]);\n\n  // useEffect(() => {\n  //   //retrieve data\n  //   getData(setData);\n  // }, []);\n\n  useEffect(() => {\n    //stats only updated at end of a session, send data to backend\n    if (stats !== []) {\n      const wpm = stats[0];\n      const sessionHash = window.location.href;\n      postData(setDataPosted, sessionHash, wpm);\n    }\n  }, [stats]);\n\n  return (\n    <React.Fragment>\n      <Navbar color=\"dark\">\n        <NavbarBrand>Type Type</NavbarBrand>\n      </Navbar>\n      <p\n        style={{\n          textAlign: \"center\",\n          textTransform: \"uppercase\",\n          color: \"grey\",\n          marginTop: \"10px\",\n        }}\n      >\n        Typing speed test\n      </p>\n      <h2 style={{ textAlign: \"center\" }}>Test your typing skills ⚡</h2>\n      <Timer>{time}</Timer>\n      <Input\n        signalStart={() => {\n          if (!startTimer) {\n            setStartTimer(true);\n            startCountdown(time);\n          }\n        }}\n        time={time}\n        setStats={setStats}\n      />\n      <Stats\n        isOpen={modalIsOpen}\n        toggle={async () => {\n          modalToggle(false);\n        }}\n        stats={stats}\n        dataPosted={dataPosted}\n      />\n      {/* <Chart data={data} /> */}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/requests.js",[],"/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Timer.js",["44","45"],"import React, { useEffect, useState } from \"react\";\n\nexport default function Timer(props) {\n  const time = props.children;\n  return (\n    <>\n      <div\n        className=\"timer bg-light tile\"\n        style={{\n          width: \"100px\",\n          height: \"100px\",\n          margin: \"50px auto 0px\",\n          borderRadius: \"25px\",\n          boxShadow: \"0px 0px 60px #d5d5d5\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <h2 style={{ margin: \"0\" }}>{time}</h2>\n      </div>\n    </>\n  );\n}\n","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Input.js",["46","47"],"import React, { useEffect, useState, useRef } from \"react\";\nimport randomWords from \"random-words\";\nimport { randomRandom } from \"../requests\";\n\nexport default function Input(props) {\n  const { signalStart, setStats, time } = props;\n  const textInputRef = useRef();\n  const targetWordRef = useRef();\n  const [targetWords, setTargetWords] = useState([\n    \"or\",\n    \"parts\",\n    \"science\",\n    \"exist\",\n    \"one\",\n    \"poet\",\n    \"dark\",\n    \"factor\",\n    \"tube\",\n    \"center\",\n  ]);\n  // const [targetWords, setTargetWords] = useState(randomWords(10));\n  const [currentTarget, setCurrentTarget] = useState(targetWords[0]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [wrongInput, setWrongInput] = useState(false);\n  const [completedWords, setCompletedWords] = useState([]);\n  const focusInput = () => {\n    textInputRef.current.focus();\n  };\n\n  console.log(\n    \"these are the words that will be used in the sentence: \",\n    targetWords\n  );\n\n  randomRandom(123);\n\n  useEffect(() => {\n    const numOfCharsEntered = userInput.trim().length;\n\n    if (userInput === currentTarget.substr(0, numOfCharsEntered)) {\n      //replace target word with remaining characters of the target word\n      targetWordRef.current.textContent = currentTarget.substr(\n        numOfCharsEntered\n      );\n      setWrongInput(false);\n    } else {\n      setWrongInput(true);\n    }\n  }, [userInput]);\n\n  useEffect(() => {\n    focusInput();\n  }, []);\n\n  const submitWord = (e) => {\n    signalStart();\n    if (e.key === \" \" || e.key === \"Enter\") {\n      //save user input word along with whether it is correct or not\n      let correct = currentTarget === userInput.trim();\n      setCompletedWords([\n        ...completedWords,\n        { word: userInput.trim(), correct },\n      ]);\n\n      //update current target word and target words list\n      let newTargetWord = targetWords[1];\n      setTargetWords([...targetWords.slice(1), randomWords(1)[0]]);\n      setCurrentTarget(newTargetWord);\n\n      //clear the input text\n      textInputRef.current.textContent = null;\n\n      //clear user input\n      setUserInput(\"\");\n\n      //prevent space or key from going into user input\n      e.preventDefault();\n    }\n  };\n\n  const countWordsCharsAndAcc = () => {\n    let totalWordsCount = completedWords.length;\n    let correctWordsArr = completedWords.filter((obj) => {\n      return obj.correct;\n    });\n    let correctWordsCount = correctWordsArr.length;\n    let characterCount = 0;\n    correctWordsArr.forEach((val) => {\n      characterCount += val.word.length;\n    });\n\n    let accuracyRate = correctWordsCount / totalWordsCount;\n    accuracyRate = (accuracyRate * 100).toFixed(2);\n\n    return [correctWordsCount, characterCount, accuracyRate];\n  };\n\n  useEffect(() => {\n    if (time === 0) {\n      //update stats only at end (design choice)\n      setStats(countWordsCharsAndAcc());\n      //reset input fields\n      let newTargetWords = randomWords(10);\n      setTargetWords(newTargetWords);\n      setCurrentTarget(newTargetWords[0]);\n      setUserInput(\"\");\n      setWrongInput(false);\n      setCompletedWords([]);\n      textInputRef.current.textContent = null;\n    }\n  }, [time]);\n  return (\n    <div\n      className=\"input-form bg-light\"\n      id=\"tooltip-target\"\n      onClick={(e) => {\n        focusInput();\n      }}\n    >\n      <div className=\"input-field-wrapper\">\n        <div style={{ display: \"flex\", float: \"right\", textAlign: \"right\" }}>\n          {completedWords.slice(-10).map((val, i) => {\n            return (\n              <span\n                key={i}\n                className={`word ${\n                  val.correct ? \"completed\" : \"completed-wrong\"\n                }`}\n              >\n                {val.word}\n              </span>\n            );\n          })}\n\n          <div\n            className={`input-field ${wrongInput ? \"wrong\" : \"correct\"}`}\n            autoCapitalize=\"off\"\n            autoCorrect=\"off\"\n            spellCheck=\"false\"\n            contentEditable\n            ref={textInputRef}\n            onInput={(e) => {\n              setUserInput(e.currentTarget.textContent);\n            }}\n            onKeyPress={submitWord}\n          ></div>\n        </div>\n      </div>\n\n      <div className=\"words-list\">\n        {targetWords.map((val, i) => (\n          <span key={i} ref={i === 0 ? targetWordRef : null} className=\"word\">\n            {val}\n          </span>\n        ))}\n      </div>\n    </div>\n  );\n}\n","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Stats.js",["48","49","50"],"import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Modal, ModalBody, ModalHeader, ModalFooter, Button } from \"reactstrap\";\n\nexport default function Stats(props) {\n  const { isOpen, toggle, stats, dataPosted } = props;\n  return (\n    <>\n      <Modal isOpen={isOpen} toggle={toggle}>\n        <ModalHeader toggle={toggle}></ModalHeader>\n        <ModalBody className=\"stat-board\">\n          {/* {dataPosted ? \"\" : \"Some\"} */}\n          {JSON.stringify(dataPosted)}\n        </ModalBody>\n        <ModalFooter>\n          <Button onClick={toggle} color=\"warning\">\n            Try Again!\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Chart.js",["51"],"import React from \"react\";\nimport * as Recharts from \"recharts/umd/Recharts\";\nconst { BarChart, Bar, XAxis, Tooltip, ResponsiveContainer } = Recharts;\n\nexport default function Chart(props) {\n  const { data } = props;\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && data && data !== []) {\n      // && data because don't run tool tip unless we have data\n      return (\n        <div\n          className=\"custom-tooltip\"\n          style={{\n            backgroundColor: \"black\",\n            color: \"white\",\n            padding: \"10px\",\n            borderRadius: \"2px\",\n            boxShadow: \"0px 0px 60px #d5d5d5;\",\n          }}\n        >\n          <p style={{ margin: 0 }}>\n            <span style={{ fontWeight: \"bold\" }}>{payload[0].value}</span>{\" \"}\n            people write\n          </p>\n          <p style={{ margin: 0 }}>\n            <span style={{ fontWeight: \"bold\" }}>{label}</span> words per minute\n          </p>\n        </div>\n      );\n    }\n\n    return null;\n  };\n  return (\n    <>\n      <h2\n        style={{\n          textAlign: \"center\",\n          padding: \"20px\",\n          marginTop: \"50px\",\n        }}\n      >\n        Global Scores 🏆\n      </h2>\n      <div className=\"chart\">\n        <ResponsiveContainer height=\"95%\" width=\"95%\">\n          <BarChart\n            width={600}\n            height={400}\n            data={data}\n            margin={{ top: 10, right: 10, bottom: 10, left: 10 }}\n          >\n            <XAxis\n              type=\"number\"\n              height={60}\n              dataKey=\"wpm\"\n              type=\"number\"\n              domain={[20, 100]}\n              label=\"words/min\"\n              ticks={[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]}\n            ></XAxis>\n            <Tooltip content={<CustomTooltip />}></Tooltip>\n            <Bar dataKey=\"frequency\" fill=\"orange\"></Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </>\n  );\n}\n",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":2,"column":18,"nodeType":"58","messageId":"59","endLine":2,"endColumn":25},{"ruleId":"56","severity":1,"message":"60","line":2,"column":27,"nodeType":"58","messageId":"59","endLine":2,"endColumn":34},{"ruleId":"56","severity":1,"message":"61","line":2,"column":49,"nodeType":"58","messageId":"59","endLine":2,"endColumn":52},{"ruleId":"56","severity":1,"message":"62","line":6,"column":8,"nodeType":"58","messageId":"59","endLine":6,"endColumn":13},{"ruleId":"56","severity":1,"message":"63","line":15,"column":10,"nodeType":"58","messageId":"59","endLine":15,"endColumn":14},{"ruleId":"56","severity":1,"message":"64","line":15,"column":16,"nodeType":"58","messageId":"59","endLine":15,"endColumn":23},{"ruleId":"56","severity":1,"message":"65","line":1,"column":17,"nodeType":"58","messageId":"59","endLine":1,"endColumn":26},{"ruleId":"56","severity":1,"message":"66","line":1,"column":28,"nodeType":"58","messageId":"59","endLine":1,"endColumn":36},{"ruleId":"67","severity":1,"message":"68","line":49,"column":6,"nodeType":"69","endLine":49,"endColumn":17,"suggestions":"70"},{"ruleId":"67","severity":1,"message":"71","line":111,"column":6,"nodeType":"69","endLine":111,"endColumn":12,"suggestions":"72"},{"ruleId":"56","severity":1,"message":"65","line":1,"column":17,"nodeType":"58","messageId":"59","endLine":1,"endColumn":26},{"ruleId":"56","severity":1,"message":"73","line":2,"column":8,"nodeType":"58","messageId":"59","endLine":2,"endColumn":13},{"ruleId":"56","severity":1,"message":"74","line":6,"column":27,"nodeType":"58","messageId":"59","endLine":6,"endColumn":32},{"ruleId":"75","severity":1,"message":"76","line":58,"column":15,"nodeType":"77","endLine":58,"endColumn":28},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'NavItem' is defined but never used.","Identifier","unusedVar","'NavLink' is defined but never used.","'Nav' is defined but never used.","'Chart' is defined but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentTarget'. Either include it or remove the dependency array.","ArrayExpression",["80"],"React Hook useEffect has missing dependencies: 'countWordsCharsAndAcc' and 'setStats'. Either include them or remove the dependency array.",["81"],"'axios' is defined but never used.","'stats' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [currentTarget, userInput]",{"range":"86","text":"87"},"Update the dependencies array to be: [countWordsCharsAndAcc, setStats, time]",{"range":"88","text":"89"},[1374,1385],"[currentTarget, userInput]",[3150,3156],"[countWordsCharsAndAcc, setStats, time]"]