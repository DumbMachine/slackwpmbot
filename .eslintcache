[{"/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/index.js":"1","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/App.js":"2","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/requests.js":"3","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Timer.js":"4","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Input.js":"5","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Stats.js":"6","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Chart.js":"7","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/random.js":"8"},{"size":262,"mtime":1610561151093,"results":"9","hashOfConfig":"10"},{"size":3196,"mtime":1610654468050,"results":"11","hashOfConfig":"10"},{"size":1265,"mtime":1610704764970,"results":"12","hashOfConfig":"10"},{"size":564,"mtime":1610561151093,"results":"13","hashOfConfig":"10"},{"size":4178,"mtime":1610649318201,"results":"14","hashOfConfig":"10"},{"size":679,"mtime":1610561151093,"results":"15","hashOfConfig":"10"},{"size":1940,"mtime":1610561151093,"results":"16","hashOfConfig":"10"},{"size":202,"mtime":1610643485412,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"16dxdyc",{"filePath":"21","messages":"22","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/index.js",[],["41","42"],"/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/App.js",["43","44","45","46","47","48","49","50","51","52","53","54","55","56"],"import axios from \"axios\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { Navbar, NavItem, NavLink, NavbarBrand, Nav, Button } from \"reactstrap\";\nimport Cookies from \"universal-cookie\";\n\nimport Input from \"./components/Input\";\nimport Timer from \"./components/Timer\";\nimport Stats from \"./components/Stats\";\n// import Chart from \"./components/Chart\";\nimport { postData } from \"./requests\";\n\nfunction App() {\n  const TIME = 10;\n  const cookies = new Cookies();\n  const [userName, setUserName] = useState(\"default\");\n  const [pythonWords, setPythonWords] = React.useState(\"\");\n  const [responseData, setResponseData] = React.useState(\"\");\n  const [dataPosted, setDataPosted] = useState({});\n  const [time, setTime] = useState(TIME);\n  const [startTimer, setStartTimer] = useState(false);\n  const [stats, setStats] = useState([]);\n  const [modalIsOpen, modalToggle] = useState(false);\n  const [data, setData] = useState([]);\n  const startCountdown = async (startTime) => {\n    for (let i = startTime; i >= 0; i--) {\n      await new Promise((r) => setTimeout(r, 1000));\n      setTime(i);\n    }\n    setStartTimer(false);\n  };\n\n  const changeUserName = () => {\n    const username = prompt(\"Please enter your slack-username\");\n    cookies.set(\"slack-wpm-pltfrm-bot\", username, {\n      expires: new Date(Date.now() + 5 * 60 * 1000),\n    });\n    setUserName(username);\n  };\n\n  useEffect(() => {\n    let username = cookies.get(\"slack-wpm-pltfrm-bot\");\n    if (username == null) {\n      username = prompt(\"Please enter your slack-username\");\n      cookies.set(\"slack-wpm-pltfrm-bot\", username, {\n        expires: new Date(Date.now() + 5 * 60 * 1000),\n      });\n    }\n    setUserName(username);\n  });\n\n  useEffect(() => {\n    if (time === 0) {\n      //display modal with stats when time runs out\n      modalToggle(true);\n\n      //on closing it, reset time\n      setTime(TIME);\n    }\n  }, [time]);\n\n  useEffect(() => {\n    //stats only updated at end of a session, send data to backend\n    if (stats !== []) {\n      const wpm = stats[0];\n      const sessionHash = window.location.href;\n      postData(userName, setDataPosted, sessionHash, wpm);\n    }\n  }, [stats]);\n\n  return (\n    <React.Fragment>\n      <Navbar color=\"dark\">\n        <NavbarBrand>Type</NavbarBrand>\n        <NavbarBrand onClick={changeUserName}>Change username</NavbarBrand>\n      </Navbar>\n      <p\n        style={{\n          textAlign: \"center\",\n          textTransform: \"uppercase\",\n          color: \"grey\",\n          marginTop: \"10px\",\n        }}\n      >\n        Typing speed test\n      </p>\n      <h2 style={{ textAlign: \"center\" }}>Test your typing skills ⚡</h2>\n      <Timer>{time}</Timer>\n      <Input\n        signalStart={() => {\n          if (!startTimer) {\n            setStartTimer(true);\n            startCountdown(time);\n          }\n        }}\n        time={time}\n        setStats={setStats}\n        hash={window.location.href}\n      />\n      <Stats\n        isOpen={modalIsOpen}\n        toggle={async () => {\n          modalToggle(false);\n        }}\n        stats={stats}\n        dataPosted={dataPosted}\n      />\n      {/* <Chart data={data} /> */}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/requests.js",[],"/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Timer.js",["57","58"],"import React, { useEffect, useState } from \"react\";\n\nexport default function Timer(props) {\n  const time = props.children;\n  return (\n    <>\n      <div\n        className=\"timer bg-light tile\"\n        style={{\n          width: \"100px\",\n          height: \"100px\",\n          margin: \"50px auto 0px\",\n          borderRadius: \"25px\",\n          boxShadow: \"0px 0px 60px #d5d5d5\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <h2 style={{ margin: \"0\" }}>{time}</h2>\n      </div>\n    </>\n  );\n}\n","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Input.js",["59","60"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { randomRandom } from \"./random\";\n\nexport default function Input(props) {\n  const { signalStart, setStats, time, hash } = props;\n  let things = hash.split(\"/\");\n  const nhash = things[things.length - 1];\n  console.log(nhash);\n  const textInputRef = useRef();\n  const targetWordRef = useRef();\n  const [targetWords, setTargetWords] = useState(randomRandom(nhash));\n  const [currentTarget, setCurrentTarget] = useState(targetWords[0]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [wrongInput, setWrongInput] = useState(false);\n  const [completedWords, setCompletedWords] = useState([]);\n  const focusInput = () => {\n    textInputRef.current.focus();\n  };\n\n  useEffect(() => {\n    const numOfCharsEntered = userInput.trim().length;\n\n    if (userInput === currentTarget.substr(0, numOfCharsEntered)) {\n      //replace target word with remaining characters of the target word\n      targetWordRef.current.textContent = currentTarget.substr(\n        numOfCharsEntered\n      );\n      setWrongInput(false);\n    } else {\n      setWrongInput(true);\n    }\n  }, [userInput]);\n\n  useEffect(() => {\n    focusInput();\n  }, []);\n\n  const submitWord = (e) => {\n    signalStart();\n    if (e.key === \" \" || e.key === \"Enter\") {\n      //save user input word along with whether it is correct or not\n      let correct = currentTarget === userInput.trim();\n      setCompletedWords([\n        ...completedWords,\n        { word: userInput.trim(), correct },\n      ]);\n\n      //update current target word and target words list\n      let newTargetWord = targetWords[1];\n      setTargetWords([...targetWords.slice(1), randomRandom(1)[0]]);\n      setCurrentTarget(newTargetWord);\n\n      //clear the input text\n      textInputRef.current.textContent = null;\n\n      //clear user input\n      setUserInput(\"\");\n\n      //prevent space or key from going into user input\n      e.preventDefault();\n    }\n  };\n\n  const countWordsCharsAndAcc = () => {\n    let totalWordsCount = completedWords.length;\n    let correctWordsArr = completedWords.filter((obj) => {\n      return obj.correct;\n    });\n    let correctWordsCount = correctWordsArr.length;\n    let characterCount = 0;\n    correctWordsArr.forEach((val) => {\n      characterCount += val.word.length;\n    });\n\n    let accuracyRate = correctWordsCount / totalWordsCount;\n    accuracyRate = (accuracyRate * 100).toFixed(2);\n\n    return [correctWordsCount, characterCount, accuracyRate];\n  };\n\n  useEffect(() => {\n    if (time === 0) {\n      //update stats only at end (design choice)\n      setStats(countWordsCharsAndAcc());\n      //reset input fields\n      let newTargetWords = randomRandom(10);\n      setTargetWords(newTargetWords);\n      setCurrentTarget(newTargetWords[0]);\n      setUserInput(\"\");\n      setWrongInput(false);\n      setCompletedWords([]);\n      textInputRef.current.textContent = null;\n    }\n  }, [time]);\n  return (\n    <div\n      className=\"input-form bg-light\"\n      id=\"tooltip-target\"\n      onClick={(e) => {\n        focusInput();\n      }}\n    >\n      <div className=\"input-field-wrapper\">\n        <div style={{ display: \"flex\", float: \"right\", textAlign: \"right\" }}>\n          {completedWords.slice(-10).map((val, i) => {\n            return (\n              <span\n                key={i}\n                className={`word ${\n                  val.correct ? \"completed\" : \"completed-wrong\"\n                }`}\n              >\n                {val.word}\n              </span>\n            );\n          })}\n\n          <div\n            className={`input-field ${wrongInput ? \"wrong\" : \"correct\"}`}\n            autoCapitalize=\"off\"\n            autoCorrect=\"off\"\n            spellCheck=\"false\"\n            contentEditable\n            ref={textInputRef}\n            onInput={(e) => {\n              setUserInput(e.currentTarget.textContent);\n            }}\n            onKeyPress={submitWord}\n          ></div>\n        </div>\n      </div>\n\n      <div className=\"words-list\">\n        {targetWords.map((val, i) => (\n          <span key={i} ref={i === 0 ? targetWordRef : null} className=\"word\">\n            {val}\n          </span>\n        ))}\n      </div>\n    </div>\n  );\n}\n","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Stats.js",["61","62","63"],"import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Modal, ModalBody, ModalHeader, ModalFooter, Button } from \"reactstrap\";\n\nexport default function Stats(props) {\n  const { isOpen, toggle, stats, dataPosted } = props;\n  return (\n    <>\n      <Modal isOpen={isOpen} toggle={toggle}>\n        <ModalHeader toggle={toggle}></ModalHeader>\n        <ModalBody className=\"stat-board\">\n          {/* {dataPosted ? \"\" : \"Some\"} */}\n          {JSON.stringify(dataPosted)}\n        </ModalBody>\n        <ModalFooter>\n          <Button onClick={toggle} color=\"warning\">\n            Try Again!\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/Chart.js",["64"],"import React from \"react\";\nimport * as Recharts from \"recharts/umd/Recharts\";\nconst { BarChart, Bar, XAxis, Tooltip, ResponsiveContainer } = Recharts;\n\nexport default function Chart(props) {\n  const { data } = props;\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && data && data !== []) {\n      // && data because don't run tool tip unless we have data\n      return (\n        <div\n          className=\"custom-tooltip\"\n          style={{\n            backgroundColor: \"black\",\n            color: \"white\",\n            padding: \"10px\",\n            borderRadius: \"2px\",\n            boxShadow: \"0px 0px 60px #d5d5d5;\",\n          }}\n        >\n          <p style={{ margin: 0 }}>\n            <span style={{ fontWeight: \"bold\" }}>{payload[0].value}</span>{\" \"}\n            people write\n          </p>\n          <p style={{ margin: 0 }}>\n            <span style={{ fontWeight: \"bold\" }}>{label}</span> words per minute\n          </p>\n        </div>\n      );\n    }\n\n    return null;\n  };\n  return (\n    <>\n      <h2\n        style={{\n          textAlign: \"center\",\n          padding: \"20px\",\n          marginTop: \"50px\",\n        }}\n      >\n        Global Scores 🏆\n      </h2>\n      <div className=\"chart\">\n        <ResponsiveContainer height=\"95%\" width=\"95%\">\n          <BarChart\n            width={600}\n            height={400}\n            data={data}\n            margin={{ top: 10, right: 10, bottom: 10, left: 10 }}\n          >\n            <XAxis\n              type=\"number\"\n              height={60}\n              dataKey=\"wpm\"\n              type=\"number\"\n              domain={[20, 100]}\n              label=\"words/min\"\n              ticks={[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]}\n            ></XAxis>\n            <Tooltip content={<CustomTooltip />}></Tooltip>\n            <Bar dataKey=\"frequency\" fill=\"orange\"></Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </>\n  );\n}\n",["65","66"],"/home/dumbmachine/work/platform.slack.board/slack-wpm-react/src/components/random.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":1,"column":8,"nodeType":"73","messageId":"74","endLine":1,"endColumn":13},{"ruleId":"71","severity":1,"message":"75","line":2,"column":38,"nodeType":"73","messageId":"74","endLine":2,"endColumn":49},{"ruleId":"71","severity":1,"message":"76","line":3,"column":18,"nodeType":"73","messageId":"74","endLine":3,"endColumn":25},{"ruleId":"71","severity":1,"message":"77","line":3,"column":27,"nodeType":"73","messageId":"74","endLine":3,"endColumn":34},{"ruleId":"71","severity":1,"message":"78","line":3,"column":49,"nodeType":"73","messageId":"74","endLine":3,"endColumn":52},{"ruleId":"71","severity":1,"message":"79","line":3,"column":54,"nodeType":"73","messageId":"74","endLine":3,"endColumn":60},{"ruleId":"71","severity":1,"message":"80","line":16,"column":10,"nodeType":"73","messageId":"74","endLine":16,"endColumn":21},{"ruleId":"71","severity":1,"message":"81","line":16,"column":23,"nodeType":"73","messageId":"74","endLine":16,"endColumn":37},{"ruleId":"71","severity":1,"message":"82","line":17,"column":10,"nodeType":"73","messageId":"74","endLine":17,"endColumn":22},{"ruleId":"71","severity":1,"message":"83","line":17,"column":24,"nodeType":"73","messageId":"74","endLine":17,"endColumn":39},{"ruleId":"71","severity":1,"message":"84","line":23,"column":10,"nodeType":"73","messageId":"74","endLine":23,"endColumn":14},{"ruleId":"71","severity":1,"message":"85","line":23,"column":16,"nodeType":"73","messageId":"74","endLine":23,"endColumn":23},{"ruleId":"86","severity":1,"message":"87","line":40,"column":3,"nodeType":"73","endLine":40,"endColumn":12,"suggestions":"88"},{"ruleId":"86","severity":1,"message":"89","line":68,"column":6,"nodeType":"90","endLine":68,"endColumn":13,"suggestions":"91"},{"ruleId":"71","severity":1,"message":"92","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":26},{"ruleId":"71","severity":1,"message":"93","line":1,"column":28,"nodeType":"73","messageId":"74","endLine":1,"endColumn":36},{"ruleId":"86","severity":1,"message":"94","line":32,"column":6,"nodeType":"90","endLine":32,"endColumn":17,"suggestions":"95"},{"ruleId":"86","severity":1,"message":"96","line":94,"column":6,"nodeType":"90","endLine":94,"endColumn":12,"suggestions":"97"},{"ruleId":"71","severity":1,"message":"92","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":26},{"ruleId":"71","severity":1,"message":"72","line":2,"column":8,"nodeType":"73","messageId":"74","endLine":2,"endColumn":13},{"ruleId":"71","severity":1,"message":"98","line":6,"column":27,"nodeType":"73","messageId":"74","endLine":6,"endColumn":32},{"ruleId":"99","severity":1,"message":"100","line":58,"column":15,"nodeType":"101","endLine":58,"endColumn":28},{"ruleId":"67","replacedBy":"102"},{"ruleId":"69","replacedBy":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.","'Nav' is defined but never used.","'Button' is defined but never used.","'pythonWords' is assigned a value but never used.","'setPythonWords' is assigned a value but never used.","'responseData' is assigned a value but never used.","'setResponseData' is assigned a value but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setUserName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [cookies] as a second argument to the useEffect Hook.",["106"],"React Hook useEffect has a missing dependency: 'userName'. Either include it or remove the dependency array.","ArrayExpression",["107"],"'useEffect' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'currentTarget'. Either include it or remove the dependency array.",["108"],"React Hook useEffect has missing dependencies: 'countWordsCharsAndAcc' and 'setStats'. Either include them or remove the dependency array.",["109"],"'stats' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["104"],["105"],"no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},"Add dependencies array: [cookies]",{"range":"118","text":"119"},"Update the dependencies array to be: [stats, userName]",{"range":"120","text":"121"},"Update the dependencies array to be: [currentTarget, userInput]",{"range":"122","text":"123"},"Update the dependencies array to be: [countWordsCharsAndAcc, setStats, time]",{"range":"124","text":"125"},[1712,1712],", [cookies]",[2169,2176],"[stats, userName]",[1130,1141],"[currentTarget, userInput]",[2908,2914],"[countWordsCharsAndAcc, setStats, time]"]