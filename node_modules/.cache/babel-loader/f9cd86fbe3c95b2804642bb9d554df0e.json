{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dumbmachine/temp/Type-Type/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Navbar, NavItem, NavLink, NavbarBrand, Nav } from \"reactstrap\";\nimport Input from \"./components/Input\";\nimport Timer from \"./components/Timer\";\nimport Stats from \"./components/Stats\";\nimport Chart from \"./components/Chart\";\nimport { postData } from \"./requests\";\n\nfunction App() {\n  _s();\n\n  const TIME = 1;\n  const [dataPosted, setDataPosted] = useState({});\n  const [time, setTime] = useState(TIME);\n  const [startTimer, setStartTimer] = useState(false);\n  const [stats, setStats] = useState([]);\n  const [modalIsOpen, modalToggle] = useState(false);\n  const [data, setData] = useState([]);\n\n  const startCountdown = async startTime => {\n    for (let i = startTime; i >= 0; i--) {\n      await new Promise(r => setTimeout(r, 1000));\n      setTime(i);\n    }\n\n    setStartTimer(false);\n  };\n\n  useEffect(() => {\n    if (time === 0) {\n      //display modal with stats when time runs out\n      modalToggle(true); //on closing it, reset time\n\n      setTime(TIME);\n    }\n  }, [time]); // useEffect(() => {\n  //   //retrieve data\n  //   getData(setData);\n  // }, []);\n\n  useEffect(() => {\n    //stats only updated at end of a session, send data to backend\n    if (stats !== []) {\n      const wpm = stats[0];\n      const sessionHash = window.location.href;\n      postData(sessionHash, wpm);\n      setDataPosted();\n    }\n  }, [stats]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      color: \"dark\",\n      children: /*#__PURE__*/_jsxDEV(NavbarBrand, {\n        children: \"Type Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: \"center\",\n        textTransform: \"uppercase\",\n        color: \"grey\",\n        marginTop: \"10px\"\n      },\n      children: \"Typing speed test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Test your typing skills \\u26A1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      signalStart: () => {\n        if (!startTimer) {\n          setStartTimer(true);\n          startCountdown(time);\n        }\n      },\n      time: time,\n      setStats: setStats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stats, {\n      isOpen: modalIsOpen,\n      toggle: async () => {\n        modalToggle(false);\n      },\n      stats: stats,\n      dataPosted: dataPosted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"AEceerVP1761r4JBnCNQzSRj2uU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dumbmachine/temp/Type-Type/client/src/App.js"],"names":["React","useEffect","useState","Navbar","NavItem","NavLink","NavbarBrand","Nav","Input","Timer","Stats","Chart","postData","App","TIME","dataPosted","setDataPosted","time","setTime","startTimer","setStartTimer","stats","setStats","modalIsOpen","modalToggle","data","setData","startCountdown","startTime","i","Promise","r","setTimeout","wpm","sessionHash","window","location","href","textAlign","textTransform","color","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Navbar, NavItem, NavLink, NavbarBrand, Nav } from \"reactstrap\";\nimport Input from \"./components/Input\";\nimport Timer from \"./components/Timer\";\nimport Stats from \"./components/Stats\";\nimport Chart from \"./components/Chart\";\nimport { postData } from \"./requests\";\nfunction App() {\n  const TIME = 1;\n  const [dataPosted, setDataPosted] = useState({});\n  const [time, setTime] = useState(TIME);\n  const [startTimer, setStartTimer] = useState(false);\n  const [stats, setStats] = useState([]);\n  const [modalIsOpen, modalToggle] = useState(false);\n  const [data, setData] = useState([]);\n  const startCountdown = async (startTime) => {\n    for (let i = startTime; i >= 0; i--) {\n      await new Promise((r) => setTimeout(r, 1000));\n      setTime(i);\n    }\n    setStartTimer(false);\n  };\n\n  useEffect(() => {\n    if (time === 0) {\n      //display modal with stats when time runs out\n      modalToggle(true);\n\n      //on closing it, reset time\n      setTime(TIME);\n    }\n  }, [time]);\n\n  // useEffect(() => {\n  //   //retrieve data\n  //   getData(setData);\n  // }, []);\n\n  useEffect(() => {\n    //stats only updated at end of a session, send data to backend\n    if (stats !== []) {\n      const wpm = stats[0];\n      const sessionHash = window.location.href;\n      postData(sessionHash, wpm);\n      setDataPosted();\n    }\n  }, [stats]);\n\n  return (\n    <React.Fragment>\n      <Navbar color=\"dark\">\n        <NavbarBrand>Type Type</NavbarBrand>\n      </Navbar>\n      <p\n        style={{\n          textAlign: \"center\",\n          textTransform: \"uppercase\",\n          color: \"grey\",\n          marginTop: \"10px\",\n        }}\n      >\n        Typing speed test\n      </p>\n      <h2 style={{ textAlign: \"center\" }}>Test your typing skills âš¡</h2>\n      <Timer>{time}</Timer>\n      <Input\n        signalStart={() => {\n          if (!startTimer) {\n            setStartTimer(true);\n            startCountdown(time);\n          }\n        }}\n        time={time}\n        setStats={setStats}\n      />\n      <Stats\n        isOpen={modalIsOpen}\n        toggle={async () => {\n          modalToggle(false);\n        }}\n        stats={stats}\n        dataPosted={dataPosted}\n      />\n      {/* <Chart data={data} /> */}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}