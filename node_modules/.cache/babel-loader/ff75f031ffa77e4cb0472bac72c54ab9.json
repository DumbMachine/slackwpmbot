{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dumbmachine/temp/Type-Type/client/src/components/Input.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport randomWords from \"random-words\";\nexport default function Input(props) {\n  _s();\n\n  const {\n    signalStart,\n    setStats,\n    time\n  } = props;\n  const textInputRef = useRef();\n  const targetWordRef = useRef();\n  const [targetWords, setTargetWords] = useState(randomWords(10));\n  const [currentTarget, setCurrentTarget] = useState(targetWords[0]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [wrongInput, setWrongInput] = useState(false);\n  const [completedWords, setCompletedWords] = useState([]);\n\n  const focusInput = () => {\n    textInputRef.current.focus();\n  };\n\n  useEffect(() => {\n    const numOfCharsEntered = userInput.trim().length;\n\n    if (userInput === currentTarget.substr(0, numOfCharsEntered)) {\n      //replace target word with remaining characters of the target word\n      targetWordRef.current.textContent = currentTarget.substr(numOfCharsEntered);\n      setWrongInput(false);\n    } else {\n      setWrongInput(true);\n    }\n  }, [userInput]);\n  useEffect(() => {\n    focusInput();\n  }, []);\n\n  const submitWord = e => {\n    signalStart();\n\n    if (e.key === \" \" || e.key === \"Enter\") {\n      //save user input word along with whether it is correct or not\n      let correct = currentTarget === userInput.trim();\n      setCompletedWords([...completedWords, {\n        word: userInput.trim(),\n        correct\n      }]); //update current target word and target words list\n\n      let newTargetWord = targetWords[1];\n      setTargetWords([...targetWords.slice(1), randomWords(1)[0]]);\n      setCurrentTarget(newTargetWord); //clear the input text\n\n      textInputRef.current.textContent = null; //clear user input\n\n      setUserInput(\"\"); //prevent space or key from going into user input\n\n      e.preventDefault();\n    }\n  };\n\n  const countWordsCharsAndAcc = () => {\n    let totalWordsCount = completedWords.length;\n    let correctWordsArr = completedWords.filter(obj => {\n      return obj.correct;\n    });\n    let correctWordsCount = correctWordsArr.length;\n    let characterCount = 0;\n    correctWordsArr.forEach(val => {\n      characterCount += val.word.length;\n    });\n    let accuracyRate = correctWordsCount / totalWordsCount;\n    accuracyRate = (accuracyRate * 100).toFixed(2);\n    return [correctWordsCount, characterCount, accuracyRate];\n  };\n\n  useEffect(() => {\n    if (time === 0) {\n      //update stats only at end (design choice)\n      setStats(countWordsCharsAndAcc()); //reset input fields\n\n      let newTargetWords = randomWords(10);\n      setTargetWords(newTargetWords);\n      setCurrentTarget(newTargetWords[0]);\n      setUserInput(\"\");\n      setWrongInput(false);\n      setCompletedWords([]);\n      textInputRef.current.textContent = null;\n    }\n  }, [time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-form bg-dark\",\n    id: \"tooltip-target\",\n    onClick: e => {\n      focusInput();\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-field-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          float: \"right\",\n          textAlign: \"right\"\n        },\n        children: [completedWords.slice(-10).map((val, i) => {\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `word ${val.correct ? \"completed\" : \"completed-wrong\"}`,\n            children: val.word\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `input-field ${wrongInput ? \"wrong\" : \"correct\"}`,\n          autoCapitalize: \"off\",\n          autoCorrect: \"off\",\n          spellCheck: \"false\",\n          contentEditable: true,\n          ref: textInputRef,\n          onInput: e => {\n            setUserInput(e.currentTarget.textContent);\n          },\n          onKeyPress: submitWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"words-list\",\n      children: targetWords.map((val, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n        ref: i === 0 ? targetWordRef : null,\n        className: \"word\",\n        children: val\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Input, \"VMeZ0Rhoh75TR07dC6eH/M9mEnA=\");\n\n_c = Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/home/dumbmachine/temp/Type-Type/client/src/components/Input.js"],"names":["React","useEffect","useState","useRef","randomWords","Input","props","signalStart","setStats","time","textInputRef","targetWordRef","targetWords","setTargetWords","currentTarget","setCurrentTarget","userInput","setUserInput","wrongInput","setWrongInput","completedWords","setCompletedWords","focusInput","current","focus","numOfCharsEntered","trim","length","substr","textContent","submitWord","e","key","correct","word","newTargetWord","slice","preventDefault","countWordsCharsAndAcc","totalWordsCount","correctWordsArr","filter","obj","correctWordsCount","characterCount","forEach","val","accuracyRate","toFixed","newTargetWords","display","float","textAlign","map","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport randomWords from \"random-words\";\n\nexport default function Input(props) {\n  const { signalStart, setStats, time } = props;\n  const textInputRef = useRef();\n  const targetWordRef = useRef();\n  const [targetWords, setTargetWords] = useState(randomWords(10));\n  const [currentTarget, setCurrentTarget] = useState(targetWords[0]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [wrongInput, setWrongInput] = useState(false);\n  const [completedWords, setCompletedWords] = useState([]);\n  const focusInput = () => {\n    textInputRef.current.focus();\n  };\n\n  useEffect(() => {\n    const numOfCharsEntered = userInput.trim().length;\n\n    if (userInput === currentTarget.substr(0, numOfCharsEntered)) {\n      //replace target word with remaining characters of the target word\n      targetWordRef.current.textContent = currentTarget.substr(\n        numOfCharsEntered\n      );\n      setWrongInput(false);\n    } else {\n      setWrongInput(true);\n    }\n  }, [userInput]);\n\n  useEffect(() => {\n    focusInput();\n  }, []);\n\n  const submitWord = (e) => {\n    signalStart();\n    if (e.key === \" \" || e.key === \"Enter\") {\n      //save user input word along with whether it is correct or not\n      let correct = currentTarget === userInput.trim();\n      setCompletedWords([\n        ...completedWords,\n        { word: userInput.trim(), correct },\n      ]);\n\n      //update current target word and target words list\n      let newTargetWord = targetWords[1];\n      setTargetWords([...targetWords.slice(1), randomWords(1)[0]]);\n      setCurrentTarget(newTargetWord);\n\n      //clear the input text\n      textInputRef.current.textContent = null;\n\n      //clear user input\n      setUserInput(\"\");\n\n      //prevent space or key from going into user input\n      e.preventDefault();\n    }\n  };\n\n  const countWordsCharsAndAcc = () => {\n    let totalWordsCount = completedWords.length;\n    let correctWordsArr = completedWords.filter((obj) => {\n      return obj.correct;\n    });\n    let correctWordsCount = correctWordsArr.length;\n    let characterCount = 0;\n    correctWordsArr.forEach((val) => {\n      characterCount += val.word.length;\n    });\n\n    let accuracyRate = correctWordsCount / totalWordsCount;\n    accuracyRate = (accuracyRate * 100).toFixed(2);\n\n    return [correctWordsCount, characterCount, accuracyRate];\n  };\n\n  useEffect(() => {\n    if (time === 0) {\n      //update stats only at end (design choice)\n      setStats(countWordsCharsAndAcc());\n      //reset input fields\n      let newTargetWords = randomWords(10);\n      setTargetWords(newTargetWords);\n      setCurrentTarget(newTargetWords[0]);\n      setUserInput(\"\");\n      setWrongInput(false);\n      setCompletedWords([]);\n      textInputRef.current.textContent = null;\n    }\n  }, [time]);\n  return (\n    <div\n      className=\"input-form bg-dark\"\n      id=\"tooltip-target\"\n      onClick={(e) => {\n        focusInput();\n      }}\n    >\n      <div className=\"input-field-wrapper\">\n        <div style={{ display: \"flex\", float: \"right\", textAlign: \"right\" }}>\n          {completedWords.slice(-10).map((val, i) => {\n            return (\n              <span\n                key={i}\n                className={`word ${\n                  val.correct ? \"completed\" : \"completed-wrong\"\n                }`}\n              >\n                {val.word}\n              </span>\n            );\n          })}\n\n          <div\n            className={`input-field ${wrongInput ? \"wrong\" : \"correct\"}`}\n            autoCapitalize=\"off\"\n            autoCorrect=\"off\"\n            spellCheck=\"false\"\n            contentEditable\n            ref={textInputRef}\n            onInput={(e) => {\n              setUserInput(e.currentTarget.textContent);\n            }}\n            onKeyPress={submitWord}\n          ></div>\n        </div>\n      </div>\n\n      <div className=\"words-list\">\n        {targetWords.map((val, i) => (\n          <span key={i} ref={i === 0 ? targetWordRef : null} className=\"word\">\n            {val}\n          </span>\n        ))}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}