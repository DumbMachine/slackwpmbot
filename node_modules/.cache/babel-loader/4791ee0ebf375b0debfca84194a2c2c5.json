{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dumbmachine/temp/Type-Type/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Navbar, NavItem, NavLink, NavbarBrand, Nav } from \"reactstrap\";\nimport Input from \"./components/Input\";\nimport Timer from \"./components/Timer\";\nimport Stats from \"./components/Stats\";\nimport Chart from \"./components/Chart\";\nimport { getData, postData } from \"./requests\";\n\nfunction App() {\n  _s();\n\n  const [time, setTime] = useState(60);\n  const [startTimer, setStartTimer] = useState(false);\n  const [stats, setStats] = useState([]);\n  const [modalIsOpen, modalToggle] = useState(false);\n  const [data, setData] = useState([]);\n\n  const startCountdown = async () => {\n    for (let i = 59; i >= 0; i--) {\n      await new Promise(r => setTimeout(r, 1000));\n      setTime(i);\n    }\n\n    setStartTimer(false);\n  };\n\n  useEffect(() => {\n    if (time === 0) {\n      //display modal with stats when time runs out\n      modalToggle(true); //on closing it, reset time\n\n      setTime(60);\n    }\n  }, [time]);\n  useEffect(() => {\n    //retrieve data\n    getData(setData);\n  }, []);\n  useEffect(() => {\n    //stats only updated at end of a session, send data to backend\n    if (stats !== []) {\n      const wpm = stats[0];\n      postData(setData, wpm);\n    }\n  }, [stats]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      dark: true,\n      color: \"dark\",\n      children: /*#__PURE__*/_jsxDEV(NavbarBrand, {\n        children: \"Type Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: \"center\",\n        textTransform: \"uppercase\",\n        color: \"grey\",\n        marginTop: \"10px\"\n      },\n      children: \"Typing speed test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Test your typing skills \\u26A1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      signalStart: () => {\n        if (!startTimer) {\n          setStartTimer(true);\n          startCountdown();\n        }\n      },\n      time: time,\n      setStats: setStats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stats, {\n      isOpen: modalIsOpen,\n      toggle: async () => {\n        modalToggle(false);\n      },\n      stats: stats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"JETkm9DWt6N92mfWrjC7LSOCwKk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dumbmachine/temp/Type-Type/client/src/App.js"],"names":["React","useEffect","useState","Navbar","NavItem","NavLink","NavbarBrand","Nav","Input","Timer","Stats","Chart","getData","postData","App","time","setTime","startTimer","setStartTimer","stats","setStats","modalIsOpen","modalToggle","data","setData","startCountdown","i","Promise","r","setTimeout","wpm","textAlign","textTransform","color","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Navbar, NavItem, NavLink, NavbarBrand, Nav } from \"reactstrap\";\nimport Input from \"./components/Input\";\nimport Timer from \"./components/Timer\";\nimport Stats from \"./components/Stats\";\nimport Chart from \"./components/Chart\";\nimport { getData, postData } from \"./requests\";\nfunction App() {\n  const [time, setTime] = useState(60);\n  const [startTimer, setStartTimer] = useState(false);\n  const [stats, setStats] = useState([]);\n  const [modalIsOpen, modalToggle] = useState(false);\n  const [data, setData] = useState([]);\n  const startCountdown = async () => {\n    for (let i = 59; i >= 0; i--) {\n      await new Promise((r) => setTimeout(r, 1000));\n      setTime(i);\n    }\n    setStartTimer(false);\n  };\n\n  useEffect(() => {\n    if (time === 0) {\n      //display modal with stats when time runs out\n      modalToggle(true);\n\n      //on closing it, reset time\n      setTime(60);\n    }\n  }, [time]);\n\n  useEffect(() => {\n    //retrieve data\n    getData(setData);\n  }, []);\n\n  useEffect(() => {\n    //stats only updated at end of a session, send data to backend\n    if (stats !== []) {\n      const wpm = stats[0];\n      postData(setData, wpm);\n    }\n  }, [stats]);\n\n  return (\n    <React.Fragment>\n      <Navbar dark color=\"dark\">\n        <NavbarBrand>Type Type</NavbarBrand>\n      </Navbar>\n      <p\n        style={{\n          textAlign: \"center\",\n          textTransform: \"uppercase\",\n          color: \"grey\",\n          marginTop: \"10px\",\n        }}\n      >\n        Typing speed test\n      </p>\n      <h2 style={{ textAlign: \"center\" }}>Test your typing skills âš¡</h2>\n      <Timer>{time}</Timer>\n      <Input\n        signalStart={() => {\n          if (!startTimer) {\n            setStartTimer(true);\n            startCountdown();\n          }\n        }}\n        time={time}\n        setStats={setStats}\n      />\n      <Stats\n        isOpen={modalIsOpen}\n        toggle={async () => {\n          modalToggle(false);\n        }}\n        stats={stats}\n      />\n      {/* <Chart data={data} /> */}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}