{"version":3,"sources":["requests.js","components/Input.js","components/Timer.js","components/Stats.js","components/Chart.js","App.js","index.js"],"names":["process","dumbmachine","module","exports","postData","setDataPosted","sessionHash","wpm","body","fetch","URL","method","headers","JSON","stringify","then","res","ok","json","Error","data","console","log","randomRandom","hash","Input","props","signalStart","setStats","time","textInputRef","useRef","targetWordRef","useState","targetWords","setTargetWords","currentTarget","setCurrentTarget","userInput","setUserInput","wrongInput","setWrongInput","completedWords","setCompletedWords","focusInput","current","focus","useEffect","numOfCharsEntered","trim","length","substr","textContent","totalWordsCount","correctWordsArr","filter","obj","correct","correctWordsCount","characterCount","forEach","val","word","accuracyRate","toFixed","countWordsCharsAndAcc","newTargetWords","randomWords","className","id","onClick","e","style","display","float","textAlign","slice","map","i","autoCapitalize","autoCorrect","spellCheck","contentEditable","ref","onInput","onKeyPress","key","newTargetWord","preventDefault","Timer","children","width","height","margin","borderRadius","boxShadow","alignItems","justifyContent","Stats","isOpen","toggle","dataPosted","stats","Modal","ModalHeader","ModalBody","ModalFooter","Button","color","Recharts","App","setTime","startTimer","setStartTimer","modalIsOpen","modalToggle","startCountdown","startTime","a","Promise","r","setTimeout","window","location","href","Fragment","Navbar","NavbarBrand","textTransform","marginTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a67bc55e.chunk.js","sourcesContent":["var env = process.env.dumbmachine || null;\n\nif (env != null) {\n  const URL = \"http://localhost:8888/saveStats\";\n} else {\n  const URL =\n    \"https://master-7rqtwti-563mnnknl3h64.eu-4.platformsh.site/saveStats\";\n}\n\nconst postData = (setDataPosted, sessionHash, wpm) => {\n  const body = { sessionHash, wpm };\n  if (wpm != null) {\n    fetch(URL, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(body),\n      \"X-Requested-With\": \"fetch\",\n    })\n      .then((res) => {\n        if (res.ok) {\n          const jsonInfo = res.json();\n          return jsonInfo;\n        } else {\n          throw new Error(\"Failed to send server data\");\n        }\n      })\n      .then((data) => setDataPosted(data));\n  } else {\n    console.log(\"skipping this request\");\n  }\n};\n\nconst randomRandom = (hash) => {\n  if (hash != null) {\n    fetch(\"https://api.quotable.io/random\", {\n      method: \"GET\",\n    }).then((res) => {\n      console.log(res.data, \" this is the things that\");\n      return res.json();\n    });\n  }\n};\n\nmodule.exports = { postData, randomRandom };\n","import React, { useEffect, useState, useRef } from \"react\";\nimport randomWords from \"random-words\";\nimport { randomRandom } from \"../requests\";\n\nexport default function Input(props) {\n  const { signalStart, setStats, time } = props;\n  const textInputRef = useRef();\n  const targetWordRef = useRef();\n  const [targetWords, setTargetWords] = useState([\n    \"or\",\n    \"parts\",\n    \"science\",\n    \"exist\",\n    \"one\",\n    \"poet\",\n    \"dark\",\n    \"factor\",\n    \"tube\",\n    \"center\",\n  ]);\n  // const [targetWords, setTargetWords] = useState(randomWords(10));\n  const [currentTarget, setCurrentTarget] = useState(targetWords[0]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [wrongInput, setWrongInput] = useState(false);\n  const [completedWords, setCompletedWords] = useState([]);\n  const focusInput = () => {\n    textInputRef.current.focus();\n  };\n\n  console.log(\n    \"these are the words that will be used in the sentence: \",\n    targetWords\n  );\n\n  randomRandom(123);\n\n  useEffect(() => {\n    const numOfCharsEntered = userInput.trim().length;\n\n    if (userInput === currentTarget.substr(0, numOfCharsEntered)) {\n      //replace target word with remaining characters of the target word\n      targetWordRef.current.textContent = currentTarget.substr(\n        numOfCharsEntered\n      );\n      setWrongInput(false);\n    } else {\n      setWrongInput(true);\n    }\n  }, [userInput]);\n\n  useEffect(() => {\n    focusInput();\n  }, []);\n\n  const submitWord = (e) => {\n    signalStart();\n    if (e.key === \" \" || e.key === \"Enter\") {\n      //save user input word along with whether it is correct or not\n      let correct = currentTarget === userInput.trim();\n      setCompletedWords([\n        ...completedWords,\n        { word: userInput.trim(), correct },\n      ]);\n\n      //update current target word and target words list\n      let newTargetWord = targetWords[1];\n      setTargetWords([...targetWords.slice(1), randomWords(1)[0]]);\n      setCurrentTarget(newTargetWord);\n\n      //clear the input text\n      textInputRef.current.textContent = null;\n\n      //clear user input\n      setUserInput(\"\");\n\n      //prevent space or key from going into user input\n      e.preventDefault();\n    }\n  };\n\n  const countWordsCharsAndAcc = () => {\n    let totalWordsCount = completedWords.length;\n    let correctWordsArr = completedWords.filter((obj) => {\n      return obj.correct;\n    });\n    let correctWordsCount = correctWordsArr.length;\n    let characterCount = 0;\n    correctWordsArr.forEach((val) => {\n      characterCount += val.word.length;\n    });\n\n    let accuracyRate = correctWordsCount / totalWordsCount;\n    accuracyRate = (accuracyRate * 100).toFixed(2);\n\n    return [correctWordsCount, characterCount, accuracyRate];\n  };\n\n  useEffect(() => {\n    if (time === 0) {\n      //update stats only at end (design choice)\n      setStats(countWordsCharsAndAcc());\n      //reset input fields\n      let newTargetWords = randomWords(10);\n      setTargetWords(newTargetWords);\n      setCurrentTarget(newTargetWords[0]);\n      setUserInput(\"\");\n      setWrongInput(false);\n      setCompletedWords([]);\n      textInputRef.current.textContent = null;\n    }\n  }, [time]);\n  return (\n    <div\n      className=\"input-form bg-light\"\n      id=\"tooltip-target\"\n      onClick={(e) => {\n        focusInput();\n      }}\n    >\n      <div className=\"input-field-wrapper\">\n        <div style={{ display: \"flex\", float: \"right\", textAlign: \"right\" }}>\n          {completedWords.slice(-10).map((val, i) => {\n            return (\n              <span\n                key={i}\n                className={`word ${\n                  val.correct ? \"completed\" : \"completed-wrong\"\n                }`}\n              >\n                {val.word}\n              </span>\n            );\n          })}\n\n          <div\n            className={`input-field ${wrongInput ? \"wrong\" : \"correct\"}`}\n            autoCapitalize=\"off\"\n            autoCorrect=\"off\"\n            spellCheck=\"false\"\n            contentEditable\n            ref={textInputRef}\n            onInput={(e) => {\n              setUserInput(e.currentTarget.textContent);\n            }}\n            onKeyPress={submitWord}\n          ></div>\n        </div>\n      </div>\n\n      <div className=\"words-list\">\n        {targetWords.map((val, i) => (\n          <span key={i} ref={i === 0 ? targetWordRef : null} className=\"word\">\n            {val}\n          </span>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nexport default function Timer(props) {\n  const time = props.children;\n  return (\n    <>\n      <div\n        className=\"timer bg-light tile\"\n        style={{\n          width: \"100px\",\n          height: \"100px\",\n          margin: \"50px auto 0px\",\n          borderRadius: \"25px\",\n          boxShadow: \"0px 0px 60px #d5d5d5\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <h2 style={{ margin: \"0\" }}>{time}</h2>\n      </div>\n    </>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Modal, ModalBody, ModalHeader, ModalFooter, Button } from \"reactstrap\";\n\nexport default function Stats(props) {\n  const { isOpen, toggle, stats, dataPosted } = props;\n  return (\n    <>\n      <Modal isOpen={isOpen} toggle={toggle}>\n        <ModalHeader toggle={toggle}></ModalHeader>\n        <ModalBody className=\"stat-board\">\n          {/* {dataPosted ? \"\" : \"Some\"} */}\n          {JSON.stringify(dataPosted)}\n        </ModalBody>\n        <ModalFooter>\n          <Button onClick={toggle} color=\"warning\">\n            Try Again!\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React from \"react\";\nimport * as Recharts from \"recharts/umd/Recharts\";\nconst { BarChart, Bar, XAxis, Tooltip, ResponsiveContainer } = Recharts;\n\nexport default function Chart(props) {\n  const { data } = props;\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && data && data !== []) {\n      // && data because don't run tool tip unless we have data\n      return (\n        <div\n          className=\"custom-tooltip\"\n          style={{\n            backgroundColor: \"black\",\n            color: \"white\",\n            padding: \"10px\",\n            borderRadius: \"2px\",\n            boxShadow: \"0px 0px 60px #d5d5d5;\",\n          }}\n        >\n          <p style={{ margin: 0 }}>\n            <span style={{ fontWeight: \"bold\" }}>{payload[0].value}</span>{\" \"}\n            people write\n          </p>\n          <p style={{ margin: 0 }}>\n            <span style={{ fontWeight: \"bold\" }}>{label}</span> words per minute\n          </p>\n        </div>\n      );\n    }\n\n    return null;\n  };\n  return (\n    <>\n      <h2\n        style={{\n          textAlign: \"center\",\n          padding: \"20px\",\n          marginTop: \"50px\",\n        }}\n      >\n        Global Scores 🏆\n      </h2>\n      <div className=\"chart\">\n        <ResponsiveContainer height=\"95%\" width=\"95%\">\n          <BarChart\n            width={600}\n            height={400}\n            data={data}\n            margin={{ top: 10, right: 10, bottom: 10, left: 10 }}\n          >\n            <XAxis\n              type=\"number\"\n              height={60}\n              dataKey=\"wpm\"\n              type=\"number\"\n              domain={[20, 100]}\n              label=\"words/min\"\n              ticks={[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]}\n            ></XAxis>\n            <Tooltip content={<CustomTooltip />}></Tooltip>\n            <Bar dataKey=\"frequency\" fill=\"orange\"></Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Navbar, NavItem, NavLink, NavbarBrand, Nav } from \"reactstrap\";\nimport Input from \"./components/Input\";\nimport Timer from \"./components/Timer\";\nimport Stats from \"./components/Stats\";\nimport Chart from \"./components/Chart\";\nimport { postData } from \"./requests\";\nfunction App() {\n  const TIME = 1;\n  const [dataPosted, setDataPosted] = useState({});\n  const [time, setTime] = useState(TIME);\n  const [startTimer, setStartTimer] = useState(false);\n  const [stats, setStats] = useState([]);\n  const [modalIsOpen, modalToggle] = useState(false);\n  const [data, setData] = useState([]);\n  const startCountdown = async (startTime) => {\n    for (let i = startTime; i >= 0; i--) {\n      await new Promise((r) => setTimeout(r, 1000));\n      setTime(i);\n    }\n    setStartTimer(false);\n  };\n\n  useEffect(() => {\n    if (time === 0) {\n      //display modal with stats when time runs out\n      modalToggle(true);\n\n      //on closing it, reset time\n      setTime(TIME);\n    }\n  }, [time]);\n\n  // useEffect(() => {\n  //   //retrieve data\n  //   getData(setData);\n  // }, []);\n\n  useEffect(() => {\n    //stats only updated at end of a session, send data to backend\n    if (stats !== []) {\n      const wpm = stats[0];\n      const sessionHash = window.location.href;\n      postData(setDataPosted, sessionHash, wpm);\n    }\n  }, [stats]);\n\n  return (\n    <React.Fragment>\n      <Navbar color=\"dark\">\n        <NavbarBrand>Type Type</NavbarBrand>\n      </Navbar>\n      <p\n        style={{\n          textAlign: \"center\",\n          textTransform: \"uppercase\",\n          color: \"grey\",\n          marginTop: \"10px\",\n        }}\n      >\n        Typing speed test\n      </p>\n      <h2 style={{ textAlign: \"center\" }}>Test your typing skills ⚡</h2>\n      <Timer>{time}</Timer>\n      <Input\n        signalStart={() => {\n          if (!startTimer) {\n            setStartTimer(true);\n            startCountdown(time);\n          }\n        }}\n        time={time}\n        setStats={setStats}\n      />\n      <Stats\n        isOpen={modalIsOpen}\n        toggle={async () => {\n          modalToggle(false);\n        }}\n        stats={stats}\n        dataPosted={dataPosted}\n      />\n      {/* <Chart data={data} /> */}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}